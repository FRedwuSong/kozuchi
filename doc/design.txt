2006/6/11
・エラー処理について。
　・想定している Validation Error については、logを残す必要はない。errorではない。
　・想定していない Validation Error については、残したい。
　・上記を区別することはできなさそう。
　・Validation　がメインのマスタ編集系は全部出したほうがいいだろうし、そうでないものは省略する？

なーんか、わからないなぁ・・・。

save! をやっておいて errors 取り出したいけどそれも rescue しないとだめだしなぁ。

まあ対処両方だけど　とりあえず deals_controller ではハンドリングしてみた。

さて、次に結構やりたいのが、登録/更新のUIの大幅チェンジ。

専用エリアをやめて、帳簿の最上部に入力エリアを設けたい。

変更は各行をクリックするとそこが編集モードに。



2006/6/9
・昨日で二重の場合の登録はできた。

残りは、
・確定
・削除（確定ー確定、確定ー未確定）
・更新
　・金額だけかわる
　・片方の口座がかわる
　・両方の口座がかわる

正直ちょっと大変。

確定について
 →フラグ変えるだけだから特に問題ない。動作ＯＫ。
 
 変更について
 ・金額だけかわる場合：
(動作) 未確定で変更ボタンをおしてもすべて変更可能。
(推測)
 　・entry は消されないで更新される。
 　その際、
 　自分が未確定でなければ以下の処理がおこなわれる。
 　・相手が確定済みならリンクがはずされる。はずして現状でもう一度つくろうとする。更新でも同様の引数がわたってくるから、
 　　最初の処理のときは相手も一緒に渡されるので、また相手のリンクこみでつくるはず。２個目も同様。
 
 　　通常の場合と同じく、確定した相手とのリンクがそれぞれきれて、新しい二重接続のDealと手をつなぐはず。
 
 (動作) エラー。update_account_entry のかえり値がboolean. 
   修正したら一重接続×２になってもた・・・。それらを未確定で削除したのは正しく動作。
　その削除したものを変更したら接続が正しくうごかない。
 おお！ another_entry_account とかをつたえてない。そりゃそうだわ。 
 変えてみたら不正なデータができるようになっちゃった。やはり変更は大変だなぁ。
 
うーん、更新がいまいち美しくない。

やりたいことはそう難しいわけではない。ちょっと手順が混乱してる。
整理すると以下のようになる。

deal の作成・更新
　→更新の場合、各account_entries の関係を先に切る
　　　相手deal が未確定なら　deal も消す
 →その上で、account_entries を必要に応じて削除する
 →account_entry を必要に応じて作成または更新する
 　　　作成でも更新でも、１つめには、相方のentry（予定）の口座を渡してやる。
 　　　 ２つめには、１つめで二重接続用 Link が作成されていたらそれをつかって作ってやる。
 
 これだけのことだよね。
 
 いまは、さきにaccount_entries の削除をやり、更新のところで関係を切っているからややこしいんじゃないか。

とうか、リンクを新たに作る処理はbefore_save で行い、切る処理は before_update で行うといい？
before_save のほうが処理順はやいんだっけか・・・・？
たしかそうだな。やっぱそうです。つかえねぇ。

ちなみに account_entry については３つのつくりかたがある。
・link まで指定されて作る（二重接続の２個目や、接続先deal として作られる場合）
・内部で新たに作る
・更新

このあたりもややこしいのです。ゆったり考えよう。先に議事録かこう。おわり。

deal では after_save にて関係をつくっている。

同様に考えるなら、account_entry でも、after_save でやってはどうかね？

でも friend_deal_id をもってるからきびしいかなぁ。

deal の作成・更新
　→更新の場合、各account_entries の関係を先に切る
　　　相手deal が未確定なら　deal も消す
 →その上で、account_entries を必要に応じて削除する
 →account_entry を必要に応じて作成または更新する
 　　　作成でも更新でも、１つめには、相方のentry（予定）の口座を渡してやる。
 　　　 ２つめには、１つめで二重接続用 Link が作成されていたらそれをつかって作ってやる。

あるいは、必要に応じて削除する...の部分で、リンクも掃除しておく？
そうしよう。
それでやってみよう。

だー・・・・なんかだめっぽい。確定でエラーが。そりゃそうかぁ。

でも、変更時は基本的につくりなおすので、confirm時だけ特殊にすればいいんちゃう。
たとえば・・・ save しないとか。

そりゃいいかも！

確定の問題はなくなったが変更があいかわらず変。

お手玉しているのか、変更後、変更した側に未確定のものが２つできる・・・。
みたかんじ、相手の古いやつはリンクきれてなくて、その未確定につながってるみたい？  save でできちゃうのかな。

リンクを削除したとき destroy 経由で自動で save がはしってその結果できてたみたい。
delete でけしてやったらなおった。

やったー；；

単体テストを確認して、未確定の場合に削除して作り直されることを確認して、未確定のときの変更について検討するか。

単体テストはとおるが、未確定の場合がおかしい・・・

相手が未確定のものを変更すると、相手側に余分な連動結果が１つだけできてる。データ状態不正っぽい。
正しいのもできてる。

古い自分をどっかでセーブしちゃってる？

ははぁ、消される相手deal_destroy -> 消される相手entry.destroy -> friend_link.destroy -> 自分entry save
ときてやっちゃってるんだな。

無理やりがんばればつぶせるけどなんかメゲてきた。

でもここでやめられない。がんばれや。

friend_link.destroy はやめよう。うん。

なおったー。。。

なかなか大変だなぁぁぁ。

もっとうまい作り方があるような気がするなぁ。

けどまあいいや。できたできた！

あとは削除もためそう。

だぁ・・・未確認のとき消えないよ orz まあ　もう一歩だ！　がんばれ！
うし、できた。

さて、自分が未確定のときについて。
　削除したら相手は残る。 OK
　変更・・・は？　まず confirm してから変更処理させようか。controller の範囲で。それが無難だな。
 すでにできてた。
 
一応このあたりで終わりかなぁ。二重じゃないケースもしらべるか。

・・・・・・あかーん；；

だめだ、やっぱこの方式はだめだぁ！！

関係ないほうの口座変えたりすると影響でちゃう；；

それは困る・・・・・・・。

作り直しじゃなくて、更新にしないとだめっぽいよ。

そのためには、account で削除とかしないとだめです。そんで account のつながってるさきのDeal に対しては更新です。

Deal の更新
　　account_entry の更新
　　　　相手Deal の更新　→更新した Deal を覚えておく
  account_entry の更新
  　　　相手Deal の更新  →覚えておいたDeal ならなにもしない

で、複数手をつなぐ候補があるとか、友達設定がかわったとかあっても、一度手をつないだものは、口座を変えない限り、つなぎっぱなし。

そうだな。。。。

お。ソースを戻さずやってみたら案外いいかんじになった。作り変える考え方はかえずに account の変更判定をかえるかんじで。

一重連携
　登録：ＯＫ
　相手が未確定のままの金額の変更：○
　相手が未確定のままの日付の変更：○
　相手が未確定のままの関係ない口座の変更：○
　相手が未確定のままのサマリーの変更：省略

　未確定から　サマリーを変更：○
　相手も自分も確定で　関係ない口座の変更：△
　　【不具合】リンクはうまくいっているが、精算ルールのある口座を選びなおしても精算状態にならない。変更ではできない不具合があるようだ。
　両方確定での削除：ok
 リンクない状態での変更：ＯＫ

　突如として理想的動きになったぞ。すばらしい。

二重連携
 作成・変更をためしたけどいけてる。
 二重→一重にしてみようか。
　ほほう。片方で否定されたリンクが解除されましたよ。勝手に現金に変更はされないけど　なかなか美しいんじゃないの。
　ばっちりだな。

一重連携×２
　なんかいけそうなきがするな・・・・。テストさぼろうかな・・・。

さて、これが終わったら設定だけやってつかっていない受け皿の利用かな。

受け皿行く前に気になってることやろう。
複数候補がある口座は、登録は現状できない。それはいいけど、一度登録された後の変更では、リンクをキープしてほしい。
今は多分はずれるはず。

方法は、変更時はUIからは口座指定というのはこないで、そのかわりもともとつながってたものが候補としてくるようにしよう。

うむ予想通りの動き。

よし、ばっちりできた。

複数候補に対しては、新規のとき明示的に選ばさせるということをＴＯＤＯで残すのみ。

こんどは受け皿口座を、新たに作ったＤｅａｌのもうひとつのentry側にもってくるところをやりたい。

うほ・・・あっというまにおわりそうです。しゅげぇ。
たった一行でおわっちゃったよーーーーーーーーーーーー

あとはAjax活用だから、そろそろやすむかなぁ。

相手が確定か未確定かで色をかえてみようか。リンクの。自分が未確定だと未確定色だからめだたないけど、一応できた。

がんばったんじゃない。きょうはこのくらいにしとこうぜ。もう使えるな。

2006/6/8
・昨日はいいところまでいった。
・きょうは、同一ユーザー連携同士の取引について取引を２つ作らない処理をぜひ。

　従来

　　　　　　　　love債権→生活費供出

　　nay債権←現金　　　　　　　生活費供出→現金

　　（生活費供出があったが、nayにすぐ貸した）

　これでも理屈はあっているが、どうせなら

　　　　　　　　nay債権←生活費供出

にしたい。これを実現する際の deal モデルは

　 　            deal
  entry1      entry2
deal_link1  deal_link2
  entry3      entry4
         deal

となっている。考え方としては、deal_link1を作る際、entry3に対して、
entry4をデフォルトアセットから選ばずに指定のアカウントにする。つまり、entry1, entry3, entry4ができる。
entry2を処理する際は、entry4を渡してやる。これにより、entry2-entry4 をつなぐdeal_link2を作る。

作成時にしぼっていうと、ここで拡張が必要になるのは、
・entry1 を作成する際に、entry2の口座を教えてやること
　→linkで相手を考える際に利用する。
・entry2 を作成する際に、link をはるべき entry を教えてやること
　→link生成処理の最優先で処理する

の２点。

従来、deal_linkを作るときは、連携対象がminus になるように書いてあり（金額の正負はどちらもある）、
minus 側の deal_link だけを指定していた。
plus 側は link がないのが前提で、現金とかになっていた。（実際にそこに連携があった場合はどう動いたのかやってない。
連携の連携についてはテストして現状を確認し、方針を決める必要があるだろう。（TODO）

ここで、minus側の deal_link だけでなく、plus 側も指定して、
other_account を account_entry の相方から割り出した連携先にすればいいんだよね。
そうとは限らないか。上記方針なら、entry2を作成する際にLink は新しくつくった上で、Dealを新しくつくらなければよい。

いや、違うな。現在の仕様は、
・account_entry をつくるとき、手をつなぐべきなら相方のDeal をつくる
・相方のDeal とこのentryが手をつなぐためのlinkをあらかじめ渡しておく。このとき、minus側のlinkしかもたせない。
という仕様だ。

したがって、仕様をそろえて安全につくるなら、
・相方のDeal とこのentryが手をつなぐためのlinkをあらかじめ渡しておく。
  このとき、このentryの相方のentry の相手がおり、同一ユーザーなら、相方entryのためのlinkもつくってわたしてやる。
 先方だけがリンクを張った状態にしておいて、相方entryがlinkを張るとき、すでに作ったよということで渡してやる。
 
 かなぁ。ちょっとだけしっくりこない。
 
 ちなみに　今は　account_entry は friend_deal_link_id を１つしかもたないから、連携の連携ということはできない。
 連携でつくられた際、minus 側がさらなる連携設定があっても、すでにfriend_link_id が予約されていればそれ以上作ろうとしない。
plus 側はリンクがないから連動できる。はず。

まとめると？
・（最初にentry を作るときは）、entry1を作るとき、entry2も渡してやる。
   entry1 は
   　　・entry 2　も連携先があり同じユーザーなら、新しいDeal を作る際、
   　　　　plus側もリンクをつくって渡してやる(:plus_friend_deal_link_id)
   　　　　処理の帰り値として、entry2が手をつなぐべき friend_link を戻す。
・entry2 を作るときは、手をつなぐべき friend_link を渡してやる。minusやplus以外に２個目ならみたいな追加）

よし！登録はできるようになった。

あと考えるべきことは、
・確定
・削除（確定ー確定、確定ー未確定）
・更新
　・金額だけかわる
　・片方の口座がかわる
　・両方の口座がかわる

かな。ひとまずは。これは仕様と照合してじっくり考えたほうがいいだろうな。

2006/6/7

今日のＴＯＤＯ
* 解消機能の新方式への移行

くーこいわく。あ。IDは 私は kuko 秀くんはshuでよいかな。


2006/6/5
モデルについて
account 1-* account_link *-1 account

多対多のアソシエーションでスムーズにいくかとおもったけど、対等なので厳密には以下の選択肢がある

a. １つリンクがあれば双方向であるとみなす
b. １つのリンクは単方向であり、双方向なら２つ作る

いちいち選択するようにするのであれば、a で問題ない気もするんだよなぁ。でも美しさとしてはb。

bでいっておくかぁ。

できてきたけどまだＵＩが完成しない。解消の移行がまだ。あとはできればテストケースかきたいかなぁ。

2006/6/1
なので、多対多も可能なデータ構造を考えるとどうなるか。

口座 - 連動ルール - 口座

だよなぁ。accountのpartner_accountを使わなくしてさ。

なんか account_rule に似てるなぁ。

移動型って逆はないんだよなぁ。イッパツでおわり。

[債権型」
・口座Ａへの記入があったら逆を口座Ｂにする。

[移動型」
・口座Ａへの特定の（正か負の）記入があったら逆を口座Ｂ（選択の結果の）にする

そう考えるとさ、
口座
　正のルール（正の記入があったときの連動）
　負のルール（負の記入があったときの連動）

なのかもね。もっとも、生活費供出 -1000 なら返金として、現金にもどってきても別にいいんじゃないかなぁ。

正負が別々の連動することってある？

というか、収入支出は負はあまりないしな。

で、どういうことになるかというと？

　　　　　　　連動ルール

○○に記入があったら即時で○○に記入する（逆も）
例）
nay の生活費供出　　　　　love の生活費収入
ko　の生活費供出             love の生活費収入

相手が１つかどうかをあらかじめ判断し、１つでなければ相手を選ばせておく。当面、複数は　unsupported でいいんじゃない。

複数といっても、フラットじゃないな。２手に分かれるんじゃないの？

上記のような場合、nay と ko の間でのやりとりが発生するわけじゃないよ。

nay の生活費供出 - love の生活費収入 - ko の生活費供出
  partner_account_group - love
                   partner_accoun

account_partners
id
account_id ←この口座は
partner_account_idこの口座とパートナーです
group_id←この関係はこのグループによって定義されています

上記の例だとこれが４つできる。
バラバラだとわかりにくいからやっぱ名前もほしいでしょ。

account_partner_groups
id
name ←生活費連動
user_id ←所有者

こんなかんじかなぁ。

いまいちしっくりこない。

          account_link
account_group - account_group
  account         account
  acocunt         account

かもしれんがなぁ。大事すぎるしなぁ。

なんか双方向にするのが複雑にしてるのかなぁ。うーん。

紙に書いて検討したところ、口座には１つだけフレンド連動ルールが設定できるということにするほうが複雑でない。

それだと、

account
accounts_team
accounts_collaboration

の３つであらわす感じ。

まだ大げさなので、
account
  connection_id
  connection_team_code
account_connection

の２つであらわすかぁ。
ちょっと前進したけど　まだ不満があるなぁ。

生活費をもらったら銀行へ入るようにしたい
　これはデフォルトルールでいけるかなぁ。
　つうか、生活費収入→銀行
例が悪いけど、生活費収入へ連動がきたときの相方は銀行よ、という定義はできたほうがいいわけですよ。
それが本当のpartner_accountかも。というか、assetな。
〜を出すとき（受けるとき）はどこよ、というやつですね。

account
  connection_id
  connection_team_code
  →この口座に記入があったとき連動すべき相手を設定。または相手が入ったとき自分が連動すべきという設定。

うーん　どうも直感的に　単方向として考えたい気がするなぁ。。。

でもしっくりきません。

やばいなぁ　ここのところ　いまいちうまく設計できないなぁ。

ルールは本当に１口座１つでいいのかとかもきになるよな。
あと、入ってきたときと出たときで相方は違うとか・・・。

できれば精算ルールも含めたようなやり方にしたいのだが。。。

account
  connected_accounts_group_id
  →この口座に記入があったとき連動すべき相手。相手に入ったときの連動には関係ない。

「ルール」に名前をつけて連動させるのならコネクションは複数対応のほうがいい。

account

account_link
  account_id
  connected_account_id

あくまでも片方向の設定ということであれば、account_rule 同様の扱いにしてよい。

債権連携などは、両方張ればいいんじゃないか？

自由にがんがん張り合って、１つの口座からみると口座リストが並んだ状態である、というのがシンプルなのではないか？

そんなきがするなぁ。。。

ベースをそうしておいて、「債権口座」は相手の債権と双方向１対１のリンクだけが張れる。とか。
いや、それもさ、債権という一般口座が、数名と結びついていても別にいいんだよね。

債権という一般口座同士が多対多で結びついていても別にいいんだよね。

一対一の場合だけ残高が連携してもいいしねぇ。

連動した口座別に詳細がみえてもいいしねぇ。

なんとなく道がひらけてきたかも。まとめると、

・連動の集合を規定して名前をつけることはない。多対多で自由にネットワークをはりあう。
　ある口座からみたとき、相手の口座一覧がみえるというだけ。

・相手との関係は、
　・自分に記入があったときの連動（ＤＢ的には相手としてリンクをもっている）
　・相手から記入があったときの連動（ＤＢ的には相手からリンクをはられている）
のいずれかあるいは両方。

・口座のタイプごとに制約を設ける。とりあえず、
　・資産型は資産型としか連動しない。当面、債権のみとする。（精算ルール移行時はクレジットカードも）
　・収入型は支出型としか互いに連動しない。

・違うユーザーの口座との連携は、対等。同一ユーザー同士では、連動してはいったほうが従。

account_link
  account_id
  connected_account_id

同じユーザーならコネクト先を連動して消すし　違えば現在の動きという感じじゃないかい。

おお　なんか　まとまってきたぞ。

しっかり設計してじっくり手をつけようぜ。といっても deal_link 自体は別にいまのままでいい。精算ルールもそっちにしたいくらいで。

ＤＢ

account_link
  account_id
  connected_account_id

user_id はいれなくても view や join でいいっちゃいい。

【ＵＩ】
・口座に連動先口座を（ユーザーを超えて）複数登録できるようにする。
・フレンドの分だけを登録できる。
・フレンド関係が変わった（外れた）ときは、account_link、deal_link もすべて解除する。
　のは後戻りできないすぎなので、フレンドのあるやつだけがリンクとして見えるようにしてもいい。速度遅そう・・・。
　それをいれて速度遅いかどうかできめるかぁ。

【取引について】
・同じ「生活費供出」でも、連動元口座のユーザーが見えたほうがよかったりもする。
　そうなると「相手」が見えたほうがいい。
　でもそういう話だと　密結合（変更、削除をお互いに反映）のほうが望ましい。
　登録したユーザーが削除すると全部消えて、登録されたユーザーが削除すると未確定になる（未確定からの削除ができない）とかはどうかねぇ。
　そろそろサブカテゴリーを設けて、連動ではいったものは自動的にユーザー名がサブカテゴリーになるとか。

道はながいなぁ・・・・。

ＵＩ的に「サブカテゴリー」を文字列で持たせてみるか。その時点の連動ユーザー（向きは関係なく）を出してみるか。

つかとりあえずユーザーでもいいわな。

連動相手が複数の場合にやりたいんだよね。

ではTODOをまとめると、

・モデルaccount_link を追加する
・account_linkをメンテするUIを作る
　※既存のdeal_link には影響させない
・BaseDealで各種連動動作
　・作る
　・変更
　・削除
・フレンド関係でdeal_link、account_linkをみえなくする
・取引に連動相手ユーザー名を表示する
・費目内サブカテゴリー集計を可能にする（将来かなぁ？）
　あるいは、収支などで集計する際、サブカテゴリーを○○（○○）で別立てで報告するとかね。
　まあ別機能のがいいかなぁ。

2006/5/31
・なにやろうかなぁ。
・確定時の処理もいいが、新しい方式の変更なんかもいいなぁ。まあ確定時やるか。...ほんの一行でおわりました。
・全般に、少し整理したいなぁ。単体テストとかつくりたいなぁ。リファクタリングしにくい状況だわ。
・あとどんな課題があったっけねぇ。コンテスト向けというと。
　・自己申請型のユーザー追加口（メール関係が必要）　まあメールはあきらめてもいいかなぁ。
　・データのエクスポート　これはあったほうがいいだろう。
　・フレンド連動は１対多もできるように。

　まあフレンド連動１対多はできないと生活費も表せないわけなので、やりましょう。
　まずは、現状を維持しながら、account　の partner_account_id を廃止して、partner_account_link_id でも。
　そのまえに、仕様を確認。

　口座（支出）　→　口座（収入）
　口座（支出）

　という具合に、複数人の支出と１つの収入をつなげたい。
　口座（収入）が口座（資産）に連動してよい。

　してみると、相手の口座もルールとして設定できたほうがいいわけだが。それは今後にしてもいいだろう。

　いまはお互いの口座名を指定して連動するようになっているが、どうなのかなぁ。
　口座（収入）側で「連動ルールＡ（集金型：支出（１〜多）→収入（１））」を設けて、ユーザーを「招待」する手もありますが。
　少なくとも、多対１の場合、多側でしか設定できない？　
　ほかの連動も考えてみよう。どういうのがあるかな？
　・供出型　支出（多）→収入（１）
　　・支出があったら相手収入にはいる。逆はない？　分配同様、紐づいているユーザーを選んでつけられてもよい。
　　・支出方：
　　・収入型：
　・分配型　支出（１）→収入（多）
　　・収入があったら相手支出にはいる？　この場合、「給与支出」と「ユーザー」を選んで支出側が記入できたほうがいい。
　・貸借型　債権（１）→債権（１）
　　・どちらかが記載したらどちらかに記載される。
　・移動型　支出（１）→収入（１）
　　・支出方：交際費など
　　・収入型：贈答など
　　→固定的なルールの場合（報酬・対価支払いなど）もあるが、交際費など流動的なケースも考えられる。
　　ルールを定義したなら動いてもよい。
　　どちらかというと、「贈答」「支払」などの固定的テーマをきめてやり、それが自分の費目上どれになるかきめてもよいかも。
　　まあ　供出・分配の多が１になったケースとして、固定的な場合は、動くことは動くだろう。
　　つまり暗黙に以下のようなものがあるのかな
　・一般移動型　支出（多）→収入（多）
　　システムが用意した「贈答」ルールに多数のユーザーが参加。贈答ルール用の口座をもっているフレンドを指定して登録すると
　　移動できる。
　　特定のユーザー集団で「給与」などを設定したってよい。

なんとなく、以下の２つでいいのかもというきもする。

・貸借型
　　債権（１）→債権（１）
　　残高も連動する。
・移動型
　　支出（多）→収入（多）
  残高は存在しない。

そして、連動ルールは１つとは考えないほうがいいのかもしれない。とはいえ、アカウントには１つで取引１つには最大２つでいいきもするがねぇ。


取引登録の際は、
　minus側が「収入/債権」タイプで、連動ルールがあれば、相手が単数なら自動登録。複数なら相手を選ばせる。
　plus側が「支出/債権」タイプで、連動ルールがあれば、同様。

2006/5/26

・従属行を無理に friend_deal で扱う必要はないかも。
基本的な動きがちがって全部自分でつくらなくてはいけなそうなこと、deal 同士の依存関係による自動削除がつかえないなど。
なんかちょっと想像しただけでも、deal_link を複数タイプにわけなきゃいけないし、account_entry にそれぞれコード増やす感じだし、
更新時に精算ルールの有無を改めて確認とか面倒かも・・・。

そろえるメリット：account_entryベースにそろえられる
デメリット：面倒

やっぱそろえたいかなぁ。

・deal_link 経由でやれることは deal_link 経由でやりたい。
・単体テストもやっぱりほしい。テスト面倒。上記をやるにしても単体テストがあってからのほうが望ましい。

単体テストは作った。精算ルールは動き的に違うからいまのでいいや。

収入支出できるようになった！(><)b

phase6としては終わりでいいかもな。

あと付け足すとすれば、相手の変更や削除によって相方を失ったものを識別したいかもね。
失ったというか、対応する新しい記入行ができて古くなっているやつね。
いまいちエレガントでないか。

あと、What's New 的ものも入れたいね。

・○○さんがmm/ddのhhhh円を登録しました！みたいな。

古くなってるやつは可能なんじゃないの。

そういえば、確定しないで変更とかできる仕様なんだけど、矛盾おきるんだよね。
フレンド登録されて、未確定なほうが変更すると、
　相方とはリンクがはずれて相方に新しいリンクができて　自分は未確定なまま
　お手玉とかしないかしら・・・

フレンドについて、仕様ももう一度検討したいよな。

でもやっぱいまのが最適かなぁ。自分以外の人の入力で金額が動くのは原則避けたい。

そうだ、従属行は変更も一部しかできないように制限されている。

未確定のフレンド連動行も変更に制限かければお手玉しないかな。
直感的にいって、確定するまで変更しなくていいんじゃないかな。
それか、フレンド連動のある未確定行の変更は、変更した段階で、確定したものとして処理される。
それがいいかな。

フレンド連動できるものの種類に制限をかけたいな。
債権だと精算ルールとフレンド連動両方ありなの？とか。ありだと思うけどよく考えないとコワイ。
債権への入金　→　債権→銀行への従属行が自動でつくられる
　　　　　　　　　　　債権者が家計簿をつかっていたら（ありえなそうだけど）、債権者には貸した人の債権が増えたと記録される
・・・まあありだなぁ。たぶんいくとおもうけど。
・・・って、従属行側もコピーするの？　面倒でしょ？　本来なら従属行同士もフレンドになるのが正解だけど。この場合。
実用上は、その必要まではないかなぁ。
そうすると、フレンド連動中の債権口座は精算ルール対象から外し、精算ルール設定中の債権口座はフレンド連動対象から外すということね。
債権ルールに精算ルールがあるときはその同じ債権にフレンド連動はないから、矛盾はしなさそう。

ということで、次なる課題は、
・フレンド連動のある未確定行を変更する場合、confirmにする。
・フレンド連動のある行を変更する場合一般に、警告を出す。
　「この記入行にはフレンド連動があります。フレンド側が確定済の場合は、今回の変更に対応した記入行が追加されます。」

かしら。一口に変更といってもいろいろあるよね。口座の変更なら影響ないんだしな。警告はやめておくかぁ。

confirmed　もできた。

2006/5/25

縺後ｓ縺ｰ縺｣縺ｦ菴懊ｍ縺?縺懊??

縺ｧ繧ゅ↑縺ｫ縺後ユ繝ｼ繝槭□縺句ｿ倥ｌ縺溘ｈ縲?

遒ｺ縺玖ｲｸ縺怜?溘ｊ縺?繧医↑縲?

逋ｻ骭ｲ縺ｯ縺ｧ縺阪ｋ繧医≧縺ｫ縺ｪ縺｣縺溘¢縺ｩ縲∝炎髯､繧?螟画峩縺ｯ縺ｧ縺阪↑縺?縺ｹ縲?

縺昴≧縺?縲√□縺九ｉ縲∫┌鬧?縺ｫ螟画峩縺励↑縺?繧医≧縺ｫ縺励◆縺?縺ｮ繧医??

繧医＠縲ゅ〒縺阪◆縲?

谺｡縺ｯ縲√け繝ｬ繧ｸ繝?繝医き繝ｼ繝峨?ｮ髢｢菫ゅｂ縲‥eal_link 縺ｧ陦ｨ縺吶ｈ縺?縺ｫ縺励◆縺?縲?
縺薙ｌ縺ｫ繧医▲縺ｦ繧ｽ繝ｼ繧ｹ縺梧紛逅?縺ｧ縺阪ｋ縺ｯ縺壹??

縺ｮ縺ｾ縺医↓縲√％繧後〒繝輔Ξ繝ｳ繝峨Μ繝ｳ繧ｯ縺｣縺ｦ縺?縺ｾ縺上＞縺上ｓ縺?縺｣縺托ｼ?

繝輔Ξ繝ｳ繝峨Μ繝ｳ繧ｯ縺ｯ縲∽ｸ?蠎ｦ縺ｧ縺阪◆繧峨??
縲?繝ｻaccount_entry 縺悟炎髯､縺輔ｌ縺溘ｉ
縲?縲?縲?蟇ｾ蠢懊☆繧句叙蠑輔′遒ｺ螳壼燕縺ｪ繧牙ｯｾ蠢懊☆繧句叙蠑輔ｒ蜑企勁縺吶ｋ縺ｹ縺?
縲?縲?縲?蟇ｾ蠢懊☆繧句叙蠑輔′遒ｺ螳壽ｸ医↑繧峨◎縺ｮ蜿門ｼ輔→縺ｮ髢｢菫ゅｒ縺ｪ縺上☆縺ｹ縺?
縲?繝ｻaccount_entry 縺悟､画峩縺輔ｌ縺溘ｉ
縲?縲?縲?蟇ｾ蠢懊☆繧句叙蠑輔′遒ｺ螳壼燕縺ｪ繧牙ｯｾ蠢懊☆繧句叙蠑輔?ｮ驥鷹｡阪ｂ螟画峩縺吶ｋ縺ｹ縺?
縲?縲?縲?蟇ｾ蠢懊☆繧句叙蠑輔′遒ｺ螳壽ｸ医↑繧峨◎縺ｮ蜿門ｼ輔→縺ｮ髢｢菫ゅｒ縺ｪ縺上＠縺ｦ縺九ｉ譁ｰ縺励＞蟇ｾ蠢懷叙蠑輔ｒ菴懊ｋ縺ｹ縺?

縺昴≧縺昴≧縲√％繧後〒縺吶ｈ縲?

繝?繧ｹ繝医?ｯ

繝ｻ譁ｰ隕上〒縺｡繧?繧薙→繝輔Ξ繝ｳ繝峨Μ繝ｳ繧ｯ縺後?ｯ繧峨ｌ繧九％縺ｨ

?ｼ育嶌謇九′譛ｪ遒ｺ螳壹?ｮ縺ｨ縺搾ｼ?
繝ｻ螟画峩縺ｧ驥鷹｡阪?√し繝槭Μ繝ｼ縲∵律縺ｫ縺｡縺後°繧上ｋ縺薙→
繝ｻ蜑企勁縺ｧ逶ｸ謇九ｂ豸医∴繧九％縺ｨ

?ｼ育嶌謇九′遒ｺ螳壹?ｮ縺ｨ縺搾ｼ?
繝ｻ螟画峩縺ｧ髢｢菫ゅ′縺阪ｌ縺ｦ縲√∋縺､縺ｮ縺後〒縺阪ｋ縺薙→
繝ｻ蜑企勁縺ｧ髢｢菫ゅ′縺阪ｌ繧九□縺?

荳?蠎ｦ逶ｮ縺ｮ繝?繧ｹ繝医?ｯ騾壹ｋ繧医≧縺ｫ縺ｪ縺｣縺溘?ゅｂ縺?荳?蠎ｦ縺ｲ縺ｨ縺ｨ縺翫ｊ繝?繧ｹ繝医＠縺ｦ縲??ｼｯ?ｼｫ縺ｪ繧牙?医∈縺吶☆繧ゅ≧縲?
蜈医→縺ｯ繝ｻ繝ｻ繝ｻ隲区ｱゅΝ繝ｼ繝ｫ繧ょ酔縺倥ｈ縺?縺ｫ繧?繧九％縺ｨ縲√°縺ｪ縲?

縺薙ｌ縺ｧ deal 縺梧ｸ帙ｊ account_entry 縺悟｢励∴繧九¢縺ｩ縲∽ｽ懊ｊ逶ｴ縺励′縺ｸ繧九?ｯ縺壹□縲?

繝ｪ繝輔ぃ繧ｯ繧ｿ繝ｪ繝ｳ繧ｰ 2006/05/20

豌励↓縺ｪ繧狗せ
繝ｻ account 蜷悟｣ｫ縺ｮ繝輔Ξ繝ｳ繝蛾未菫?
縲?繝吶せ繝医〒縺ｯ縺ｪ縺?縺阪′縺吶ｋ縺代ｌ縺ｩ縲?縺ｨ繧翫≠縺医★譁ｰ縺励＞譁ｹ蠑上↓邨ｱ荳?縺吶ｋ

繝ｻ deal_link 縺ｮ蟆主?･
縲?deal_link 繝?繝ｼ繝悶Ν繧剃ｽ懊ｊ縲‖ccount_entry 縺ｫ friend_link_id 縺ｨ縺励※蜿ら?ｧ縺輔○繧?
 friend_deal 繝?繝ｼ繝悶Ν繧貞炎髯､縺吶ｋ
 
 縺ｾ縺壽眠譁ｹ蠑上〒繝?繝ｼ繧ｿ縺御ｽ懊ｌ繧九ｈ縺?縺ｫ縺ｪ縺｣縺ｦ縺九ｉ譌ｧ譁ｹ蠑上?ｮ逞戊ｷ｡繧呈ｶ医☆
竊剃ｽ懊ｌ繧九ｈ縺?縺ｫ縺ｯ縺ｪ縺｣縺溘?Ｂfter_find 縺ｮ蝠城｡後?ｯ縺ゅｋ縺後??騾比ｸｭ迥ｶ諷九ｒ險ｱ縺吶％縺ｨ縺ｫ縺励※縲‖ccount_entry 繧偵そ繝ｼ繝門ｾ後↓菴懊ｋ譁ｹ蠑上〒
縺?縺?縺ｨ縺翫ｂ縺?縲ゅ□縺｣縺ｦaccount_entry 縺後??deal_id 繧偵ｂ縺､莉･荳翫?√◎縺ｮ縺ｻ縺?縺梧ｭ｣縺励＞鬆?逡ｪ縺?縺励??

譌ｧ譁ｹ蠑上ｒ豸医☆蜑阪↓縲∵立譁ｹ蠑上〒縺吶〒縺ｫ蜈･縺｣縺ｦ縺?繧九ョ繝ｼ繧ｿ繧偵←縺?遘ｻ陦後☆繧後?ｰ縺?縺?縺玖??縺医ｈ縺?縲?

繝ｻ繝ｻ繝ｻ縺ゅ?√?ｯ縺?縺｣縺ｦ縺ｪ縺?縺ｪ縲√ヵ繝ｬ繝ｳ繝蛾?｣蜍輔?ｯ縺ｾ縺?縲?

縺?縺九ｉ豌励↓縺帙★豸医＠縺ｦ蟷ｳ豌励□縲らｲｾ邂励?ｮ譁ｹ蠑上ｒ螟峨∴繧句?ｴ蜷医↓繝?繝ｼ繧ｿ遘ｻ陦後′蠢?隕√↑繧薙□縺ｪ縲ゅ≠縺｣縺｡繧ょ､峨∴縺溘￥縺ｯ縺ゅｋ縺後ヵ繝ｬ繝ｳ繝峨′縺阪ｌ縺?縺ｫ縺ｪ縺｣縺ｦ縺九ｉ縺ｧ縺?縺?繧?縲?

縺倥ｃ縺よ立譁ｹ蠑上?ｮ逞戊ｷ｡繧呈ｶ医◎縺?縲ゆｸ頑嶌縺阪ｂ縺､縺上ｉ縺ｪ縺?縺ｨ縺?縺代↑縺?縺代←縺薙?ｮ縺､縺弱▲縺ｦ縺薙→縺ｧ縲?


---------------------------------------------------------------
繝輔ぉ繝ｼ繧ｺ?ｼ代↓蠢?隕√↑讖溯?ｽ

繝ｻ蜿｣蠎ｧ繝｡繝ｳ繝??ｼ医?ｯ縺倥ａ縺ｯScaffold?縺ｫ縺ｾ縺九○繧?)
繝ｻ蜿門ｼ慕ｳｻ
縲?繝ｻ逋ｻ骭ｲ
縲?繝ｻ陦ｨ遉ｺ
縲?繝ｻ蜑企勁

繝輔ぉ繝ｼ繧ｺ?ｼ偵?ｮ譛?邨りｪｿ謨ｴ?ｼ医°谺｡縺ｪ縺ｮ縺具ｼ?

譌･莉倥↓縺､縺?縺ｦ

繝ｻ譛医?ｯ驕ｸ繧薙□繧峨◎繧後′險伜?･縺ｫ繧ゆｿｮ豁｣縺ｫ繧る←逕ｨ縺輔ｌ縺ｦ縺ｻ縺励＞
繝ｻ蜈･蜉帶凾縺ｫ譛医ｒ菫ｮ豁｣縺ｧ縺阪ｋ繧医≧縺ｫ縺励◆縺?縲?蜈･蜉帙＠縺滓ｮｵ髫弱〒陦ｨ遉ｺ邨先棡縺ｯ遘ｻ蜍輔＠縺ｦ縺ｻ縺励＞
繝ｻ荳企Κ縺ｫ繧ｫ繝ｬ繝ｳ繝?繝ｼ縺後≠繧九?ｮ縺後＞縺?
縲?繝ｻ繝ｻ繝ｻ縺?繧薙□繧灘燕縺､縺九▲縺ｦ縺溘ｄ縺､縺ｫ莨ｼ縺ｦ縺阪※繧?縺?縺ｪ?ｽ?
縲?縺ｧ繧ょ?ｨ驛ｨ驕ｸ縺ｹ繧九?ｮ縺ｯ繧?縺?縺ｪ縲ゅ?御ｻ頑怦縲阪′蜿ｳ縺ｯ縺倥?ｮ縺ｻ縺?縺ｫ縺ゅｋ縺ｮ縺後＞縺?縲よ擂譛医→縺九?ｯ縺ゅ▲縺ｦ縺?縺?縲ゅ??

縲?縺溘→縺医?ｰ?ｼ抵ｼ撰ｼ撰ｼ門ｹｴ?ｼ疲怦縺檎樟蝨ｨ縺ｧ縺ゅｌ縺ｰ

 --2005  2006-------------
縲?竊舌???ｼ托ｼ偵??縲??ｼ代??縲??ｼ偵??縲??ｼ薙??縲??ｼ??ｼ費ｼ√???ｼ輔??竊? 
        [2006]/[4]

縲?縺九↑縲ゑｼ斐Ω譛亥燕縺九ｉ譚･譛医∪縺ｧ縺碁∈縺ｹ繧後?ｰ縺翫♀繧?縺ｭ繧医＞縲?

 JavaScript縺ｧ閾ｪ逕ｱ縺ｫ驕ｸ縺ｹ繧九ｈ縺?縺ｫ縺励◆縺?縲ょ?･蜉帙＠縺溘ｉ縺昴?ｮ譛医′迴ｾ蝨ｨ縺ｮ菴咲ｽｮ縺ｫ縺ｪ繧九ｈ縺?縺ｫ繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ縺吶ｋ縲?
 譌･莉倥ｒ繧ｫ繝ｬ繝ｳ繝?繝ｼ縺ｧ蜈･繧後ｋ蠢?隕∵?ｧ縺ｯ縺ゅ∪繧頑─縺倥↑縺?縺後?∝酔讒倥↓
 
 -- 2006/4 ----------------
 蝨?     譌･     譛?     轣ｫ	縲?豌ｴ   縲?譛ｨ     驥?
縲?15  16  17  18  19 !20! 21
   [2006]/[4]/[20]

縺ｧ縺ゅ▲縺ｦ繧ゅｈ縺?縺九ｂ縺励ｌ縺ｪ縺?縲ゅ◎繧薙↑縺ｫ蜃昴ｋ縺ｮ縺ｯ諤･縺後↑縺?縺梧ｯ主ｺｦ譛医ｒ蜈･蜉帙☆繧九?ｮ縺ｯ縺?繧?縺?縺ｪ縺√??

譌･繧√￥繧頑─隕壹〒繧ゅ＞縺?縺ｪ縺√??

 --2005  2006-------------  	|			|
縲?竊舌???ｼ托ｼ偵??縲??ｼ代??縲??ｼ偵??縲??ｼ薙??縲??ｼ??ｼ費ｼ√???ｼ輔??竊?  	| 20譌･(譛ｨ)	|
                [2006]/[4]	  - | [20]		|+


繝ｻ莉頑律險伜?･縺励◆繧ゅ?ｮ縺ｯ濶ｲ縺悟､峨ｏ縺｣縺ｦ縺ｻ縺励＞
縲?竊定ｨ伜?･譌･縺ｯ谿九▲縺ｦ縺ｻ縺励＞


谿矩ｫ倥↓縺､縺?縺ｦ

縺昴≧縺?縲∵ｮ矩ｫ倥ｄ繧峨↑縺上■繧?繝ｻ繝ｻ繝ｻ縲?

繝ｻ蜷?蜿｣蠎ｧ縺ｮ谿矩ｫ倥′邁｡蜊倥↓隕九ｉ繧後ｋ繧医≧縺ｫ縺励◆縺?
繝ｻ谿矩ｫ倡｢ｺ隱榊?･蜉帙′縺励◆縺?
縲?縺薙ｌ縺ｯ繝輔ぉ繝ｼ繧ｺ?ｼ偵〒縺ｯ辟｡逅?縺九↑縺??ｼ溘??蛻晄悄蛟､縺ｨ縺励※繧ゅ〒繧ょｿ?隕√□繧医↑縲?
縲?險ｭ險井ｸ雁撫鬘後↑縺ｮ縺ｯ縲∝叙蠑輔?ｮ荳?遞ｮ縺ｪ縺ｮ縺九◎縺?縺ｧ縺ｯ縺ｪ縺?縺ｮ縺九??
縲?縺ｨ縺?縺?縺九％繧後ｒ繧?繧九◆繧√↓繧ｷ繝ｼ繧ｱ繝ｳ繧ｹ縺ｫ縺励◆繧薙□縺九ｉ蜿門ｼ輔?ｮ荳?遞ｮ縺ｫ縺帙＊繧九ｒ縺医∪縺帙ｓ縲?
縲?account_entry縺ｫbalance繧定ｨｭ縺代※縺輔?√％繧後↓縺ｲ繧ゅ▼縺上□縺代?ｮ蜿門ｼ輔ｒ菴懊ｋ縲?
縲?繧薙〒縲∬ｦ∵ｱゅ＆繧後◆縲梧凾轤ｹ縲阪↓縺翫＞縺ｦ縺ｮ譛?譁ｰ縺ｮbalance莉･髯搾ｼ茨ｼ区凾轤ｹ縺ｾ縺ｧ?ｼ峨〒谿矩ｫ倥ｒ險育ｮ励??

